//=================================================正则表达式==========================================
/*

===============限定符?
abcd?
	表示d这个字符出现0次或者1次
	abcd? 可以匹配到abc和abcd


===============限定符*
* 匹配 0~多个字符
	如ab*c 可以匹配ac  abc  abbbbbbbc  


===============限定符+
+ 匹配 1~多个字符
	ab+c  =>>>>> abc   abbbbbbc   无法匹配ac

===============限定符{}
{} ab{5}c
	匹配 abbbbbc =>>>b的数量为5
   ab{2,5}c
    匹配abbc ~ abbbbbc   =>>>>>b的数量为2~5
   ab{2,}c
   	匹配ab...c中  b出现次数大于2的

若想匹配 多次出现的ab   
那么使用(ab)后跟限定符  =>>>>> (ab)  或者(ab)+


==============="或"运算符 |

a (cat|dog)
	表示匹配 a cat 或者 a dog
	括号不能少

===============字符类
[abc]+ 表示匹配出现在括号里的所有字符   =>>>比如aabbcc  abc  ababcccbcbcbababb均能匹配
[a-zA-Z0-9]+ 代表所有的英文字符和数字
在方括号前加上^  则表示匹配除了尖括号内以外的数字

===============元字符
\d 数字字符 
\w 单词字符（英文、数字及下划线）
\s 空白符（包含Tab和换行符）

\b 代表行结束符

\D 代表 **非**数字字符
\W 代表 **非**单词字符
\S 代表 **非**空白字符

. 代表任意字符，但是不包含换行符

^ 会匹配行首    =>>>>>比如^a只会去匹配行首的第一个a     如abbbbbbbacba ， 只会匹配行首第一个a
$ 匹配行尾      =>>>>> a$只会去匹配行尾的a   如abbbbbbbaca  只会匹配最后的a  ， aaabbac则不会匹配到a


===============贪婪与懒惰匹配
* + {}在匹配字符串的时候，会尽可能多的去匹配字符

若有 <span><b>test sample text</b></span>
	那么 <.+>会进行贪婪匹配，表示<>之间，可以出现任意字符，那么最终匹配结果为第一个 < 到最后一个 > 
	将 <.+>变为懒惰匹配：
		<.+?>表示 < >之间的任意字符出现0次或者1次，那么就会匹配所有的<span>  <b>  </b>  </span>	
	
*/

/*
实例1：
	RGB颜色匹配

	若有#00
		#ffffff
		#ffaaff
		#00hh00
		#aabbcc
		#000000
		#ffffffff

	#[a-fA-F0-9]{6}\b  可做正确的匹配
	#代表开头的#，[a-fA-F0-9]代表可以匹配a-f  A-F  0-9 的字符， {6}代表长度为6   \b代表行结束符

实例2：
	IPv4的地址匹配
	
	若有
		123
		255.255.255.0
		192.168.1.1
		0.0.0.0
		256.1.1.1
		123.123.0
		999.999.99.999

	\d+\.\d+\.\d+\.\d+  .为特殊字符，因此要使用\进行转译。
	这个regex可以匹配 xxx.xxx.xxx.xxx 其中x为数字，但是因为ip地址的范围大小为0-255，因此需要进行范围限制

	\b((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)\b
	首位的两个\b限制了首尾
	(25[0-5]|2[0-4]\d|[01]?\d\d?)表示 
		以25开头的话，后续数字只能是0-5
		以2开头的话，后续的数字是0-4
		以0或1开头的话，后续的数字可以为两个任意值

		因为ip地址可以为1位、2位、3位，因此 [01]?\d\d? 包含了一位、两位、以0、1开头的三位的情况，以25和2开头的情况在前面

	((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3} 
		加入的\.表示匹配ip地址的.    {3}表示这种格式出现三次，即匹配了符合要求的ip地址的前三段

	对于最后一段，即第四段，直接复制(25[0-5]|2[0-4]\d|[01]?\d\d?)即可

	最后把开头和结尾加上\b来匹配字符的边界

*/














